(def t [{:mouseup [(fn [] "mu")] } {:mousemove [(fn [] "mm")]} {:mousedown [(fn [] "md")]}])
(filter #(= (:name %) "mm") t)
(filter #(= (:mousemove %) "mm") t)
(filter #(contains? # :mousemove ) t)
(filter #(contains? % :mousemove ) t)
(filter #(contains? % :mouseup ) t)
((filter #(contains? % :mouseup ) t))
(get (first (filter #(contains? % :mouseup ) t)) :mouseup)
(first (get (first (filter #(contains? % :mouseup ) t)) :mouseup))
((first (get (first (filter #(contains? % :mouseup ) t)) :mouseup)))
(/ 14700 12) 
(+ 1225 4000) 
exit
(defn apply-defaults [config default & rest]
  (assoc (merge config default) rest))
(apply-defaults {:id 'test} {:type 'test2} :color 'red)
(apply-defaults {:id 'test} {:type 'test2})
(apply-defaults {:id 'test} {:type 'test2} :color)
(apply hash-map (1 2 3))
(ap 5ply hash-map (1 2 3))
(ap 5ply hash-map (1 2 3 5))
(apply hash-map (1 2 3 5))
(apply hash-map '(1 2 3 5))
(:test '6 :t 7
}
{:test '6 :t 7}
(defn apply-defaults [config default & rest]
  (assoc (merge config default) (apply hash-map rest)))
(apply-defaults {:id 'test} {:type 'test2} :color 'red)
(defn apply-defaults [config default & rest]
  (apply assoc (merge config default) rest))
(apply-defaults {:id 'test} {:type 'test2} :color 'red)
(apply-defaults {:id 'test} {:id 'test2 :type 'test2} :color 'red)
(:use 'zee3.draw.server)
(main)
 (exit)
(def directory (clojure.java.io/file "/path/to/directory"))
(def files (file-seq directory))
(take 10 files)
(def directory (clojure.java.io/file ""))
(def files (file-seq directory))
(take 10 files)
(import java.io.File)
(file-seq (File. "."))
(doseq [file (file-seq (File. "."))] (println file))
(ns zee3.draw.draw-selenium-test
   (:use clojure.test))
(use 'clj-webdriver.taxi)
(defn setup [f]
   (set-driver! {:browser :firefox})
   (to "/resources/public/selenium-tests.htm")
   (f)
   (quit))
(setup (fn []))
(set-driver! {:browser :firefox})
exit
(ns zee3.draw.draw-selenium-test
   (:use clojure.test))
(use 'clj-webdriver.taxi)
(set-driver! {:browser :firefox})
(to "/resources/public/selenium-tests.htm")
exit
(ns zee3.draw.draw-selenium-test
   (:use clojure.test))
(use 'clj-webdriver.taxi)
(set-driver! {:browser :firefox})
(to "/resources/public/selenium-tests.htm")
(to "resources/public/selenium-tests.htm")
(to "file://resources/public/selenium-tests.htm")
(ns zee3.draw.draw-selenium-test
   (:use clojure.test))
(use 'clj-webdriver.taxi)
(set-driver! {:browser :firefox})
(-> (java.io.File. ".") .getAbsolutePath)
(-> (java.io.File. "") .getAbsolutePath)
(to (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm"))
(find-element {:id "stage")
(find-element {:id "stage"})
(element {:id "stage"})
(element "canvas")
(element "body")
(set-driver! {:browser :firefox})
(to (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm"))
(element "body")
(element "canvas")
(move-to-element (element "canvas"))
(move-to-element (element "canvas")) (double-click)
(->actions b (move-to-element (find-element b "canvas")) (double-click))
(double-click)
(let [ a (new org.openqa.selenium.interactions.Actions)] (.moveByOffset 50 50) (.click a))
(import '(org.openqa.selenium.interactions Actions))
(let [ a (new org.openqa.selenium.interactions.Actions)] (.moveByOffset 50 50) (.click a))
(doto (new org.openqa.selenium.interactions.Actions)] (.moveByOffset 50 50) (.click))
(doto (new org.openqa.selenium.interactions.Actions) (.moveByOffset 50 50) (.click))
(import '(org.openqa.selenium.interactions Actions))
(import '(org.openqa.selenium.interactions.Actions))
(doto (new org.openqa.selenium.interactions.Actions) (.moveByOffset 50 50) (.click))
(doto (new org.openqa.selenium.interactions.Actions) (.moveByOffset 50 50))
(new org.openqa.selenium.interactions.Actions)
(new org.openqa.selenium.interactions.Actions driver)
(*driver*)
(new org.openqa.selenium.interactions.Actions *driver*)
(browser-spec)
(~browser-spec)
(new-driver)
(click [60 60])
(*driver*)
(:webdriver *driver*)
(new org.openqa.selenium.interactions.Actions (:webdriver *driver*))
(.click (new org.openqa.selenium.interactions.Actions (:webdriver *driver*)))
(find-element {:tag :canvas})
(:webelement (find-element {:tag :canvas}))
(let [act (new org.openqa.selenium.interactions.Actions (:webdriver *driver*))]
(.moveToElement act (:webelement (find-element {:tag :canvas})))
(.click act))
(let [act (new org.openqa.selenium.interactions.Actions (:webdriver *driver*))]
(.moveToElement act (:webelement (find-element {:tag :canvas})) 50 50)
(.click act))
(.click act))(let [act (new org.openqa.selenium.interactions.Actions (:webdriver *driver*))]
(.moveToElement act (:webelement (find-element {:tag :canvas})) 25 25)
(.click act))
(let [act (new org.openqa.selenium.interactions.Actions (:webdriver *driver*))] (.moveToElement act (:webelement (find-element {:tag :canvas})) 25 25) (.click act))
(let [act (new org.openqa.selenium.interactions.Actions (:webdriver *driver*))] (.moveToElement act (:webelement (find-element {:tag :canvas})) 25 25) (.click act) (.perform act))
(.perform (let [act (new org.openqa.selenium.interactions.Actions (:webdriver *driver*))] (.moveToElement act (:webelement (find-element {:tag :canvas})) 25 25) (.click act) (.build act)))
(let [act (new org.openqa.selenium.interactions.Actions (:webdriver *driver*))] (.moveByOffset act 25 25) (.contextClick act) (.perform act))
(set-driver! {:browser :chrome})
(set-driver! {:browser :firefox})
(to (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm"))
(let [act (new org.openqa.selenium.interactions.Actions (:webdriver *driver*))] (.moveByOffset act 25 25) (.contextClick act) (.perform act))
(click {:tag :canvas})
(set-driver! {:browser :firefox})
(to (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm"))
(click {:tag :div})
(let [act (new org.openqa.selenium.interactions.Actions (:webdriver *driver*))] (.moveToElement act (:webelement (find-element {:tag :canvas}))) (.click act) (.perform act))
(->actions b
  (click-and-hold (find-element b {:tag :div}))
  (release))
(->actions b
  (click-and-hold (find-element b {:tag :div}))
  (release))
(-> actions b
  (click-and-hold (find-element b {:tag :div}))
  (release))
(-> actions b
  (double-click (find-element b {:tag :div})))
(-> actions b
  (double-click (find-element b {:tag :div})))
  (->> "div"
       by-css-selector
       (find-element-by b)
       click)
(def b (start {:browser :firefox} "https://github.com"))
(:use 'clj-webdriver.core)
  (->> "div"
       by-css-selector
       (find-element-by b)
       click)
(def b (start {:browser :firefox} "https://github.com"))
(:use 'clj-webdriver.driver)
(def b (start {:browser :firefox} "https://github.com"))
(use 'clj-webdriver.driver)
(use 'clj-webdriver.core)
(def b (start {:browser :firefox} "https://github.com"))
quit
(def driver (start {:browser :firefox} "http://example.com"))
(use 'clj-webdriver.core)
(use 'clj-webdriver.driver)
(def driver (start {:browser :firefox} "http://example.com"))
  (->> "a"
       by-css-selector (find-element-by b) click)
  (->> "a"
       by-css-selector (find-element-by driver) click)
(let [act (:actions *driver*)] (.moveToElement act (:webelement (find-element {:tag :canvas}))) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element {:tag :canvas}))) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by {:tag :canvas}))) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas}))) (.click act) (.perform act))
  (->> "a"
)
(def driver (start {:browser :firefox} "http://example.com"))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas}))) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :div}))) (.click act) (.perform act))
(let [act (:actions *driver*)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 25 25) (.click act) (.perform))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 25 25) (.click act) (.perform))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :div}))) (.click act) (.perform act))
(def driver (start {:browser :firefox} "http://example.com"))\
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 25 25) (.click act) (.perform))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 25 25) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 50 50) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 100 100) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 70 70) (.click act) (.perform act))
(def driver (start {:browser :firefox} (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm")))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 120 120) (.click act) (.perform act))
(let [act (:actions *driver*)] (.moveToElement act (:webelement (find-element {:tag :div}))) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element {:tag :div}))) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by {:tag :div}))) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :div}))) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :div})) 120 120) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :div}))) (.click act) (.perform act))
(def driver (start {:browser :firefox} (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm")))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :div})) 120 120) (.click act) (.perform act))
(def driver (start {:browser :firefox} (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm")))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 120 120) (.click act) (.perform act))
(let [act (:actions driver)] (.moveByOffset act 120 120) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :div}))) (.click act) (.perform act))
(def driver (start {:browser :firefox} (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm")))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 30 30) (.click act) (.perform act))
(def driver (start {:browser :ie} (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm")))
(def driver (start {:browser :chrome} (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm")))
exit
(use 'clj-webdriver.taxi)
(def driver (start {:browser :chrome} (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm")))
(use 'clj-webdriver.driver)
(def driver (start {:browser :chrome} (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm")))
(use 'clj-webdriver.core)
(def driver (start {:browser :chrome} "http://example.com"))\
(def driver (start {:browser :chrome} "http://example.com"))
(set-driver! {:browser :chrome})
 (to (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm"))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 30 30) (.click act) (.perform act))
(use 'clj-webdriver.core)
exit
(use 'clj-webdriver.core)
(set-driver! {:browser :chrome})
(use 'clj-webdriver.driver)
(set-driver! {:browser :chrome})
(def driver (start {:browser :chrome} (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm")))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 30 30) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 50 50) (.click act) (.perform act))
(let [act (:actions driver)] (.moveToElement act (:webelement (find-element-by driver {:tag :canvas})) 70 70) (.click act) (.perform act))
(set-driver! {:browser :chrome})
(use 'clj-webdriver.driver)exit
exit
(use 'clj-webdriver.taxi)
(set-driver! {:browser :chrome})
(to (str "file://" (-> (java.io.File. ".") .getAbsolutePath) "/resources/public/selenium-tests.htm"))
(let [act (:actions *driver*)] 
      (.moveToElement act (:webelement (element {:tag :canvas})) 70 70) 
      (.click act) 
      (.perform act))
exit
(defn draw-stage [config]
  (let [ {:keys [id width height]} config e (.createElement js/document "canvas") hit-stage-id (str id HIT-TEST-STAGE)]
    (set! (.-id e) hit-stage-id)
    (Set! (.-width e) width)
    (set! (.-height e) height)
    (setupEvents e)
    (let [ctx (.getContext e "2d")]
      (swap! shape/entities conj (assoc config :type "stage" :ref e :context ctx :parent hit-stage-id)))))
exit
(defn to-hex [s]
  (format "%2x" s))
(defn color-hash [] 
   (let [r (atom 0) g (atom 0) b (atom 0)]
      (fn [] 
         (let [hex-color (str "#" (to-hex @r) (to-hex @g) (to-hex @b))]
            (swap! r inc)
    (if (> @r 255) (do (swap! r 0) (swap! g inc)))
    (if (> @g 255) (do (swap! g 0) (swap! b inc)))
    (if (> @b 255) (swap! b 0))
    hex-color))))
(def color-generator [] (color-hash))
exit
quit
(defn to-hex [s]
  (let [ hex (.toString s 16)]
    (str (.substr "00" 0, (- 2 (.-length hex))) hex)))
(defn color-hash [] 
   (let [r (atom 0) g (atom 0) b (atom 0)]
      (fn [] 
         (let [hex-color (str "#" (to-hex @r) (to-hex @g) (to-hex @b))]
            (swap! r inc)
    (if (> @r 255) (do (swap! r 0) (swap! g inc)))
    (if (> @g 255) (do (swap! g 0) (swap! b inc)))
    (if (> @b 255) (swap! b 0))
    hex-color))))
(color-hash)
(def color-generator (color-hash))
(color-generator)
(repeat 251 (cmap/color-generator))
(color-generator)
(defn to-hex [s]
  (let [ hex (.toString s 16)]
    (str (.substr "00" 0, (- 2 (.-length hex))) hex)))
(defn color-hash [] 
   (let [r (atom 0) g (atom 0) b (atom 0)]
      (fn [] 
         (let [hex-color (str "#" (to-hex @r) (to-hex @g) (to-hex @b))]
            (swap! r inc)
    (if (> @r 255) (do (swap! r 0) (swap! g inc)))
    (if (> @g 255) (do (swap! g 0) (swap! b inc)))
    (if (> @b 255) (swap! b 0))
    hex-color))))
(def color-generator (color-hash))
color-generator
(color-generator)
(doseq [f [#(prn "x") #(prn "x") #(prn "x")] (f))
(doseq [f [#(prn "x") #(prn "x") #(prn "x")]] (f))
(doseq [f (#(prn "x") #(prn "x") #(prn "x"))] (f))
(let [a (#(prn "x") #(prn "x") #(prn "x"))] (doseq [f a] (f)))
(#(prn "x") #(prn "x") #(prn "x"))
#(prn "x") #(prn "x") #(prn "x")
[#(prn "x") #(prn "x") #(prn "x")]
(repeatedly 5 #(prn 1))
(repeatedly 5 (prn 1))
(repeatedly 5 #((prn 1)))
(repeatedly 5 #(prn 1))
#(prn 1)
(prn 1)
(repeatedly 5 #(+ 1 1))
(def m [{:id "test"} {:id "test2"} ])
(filter #(= "test" (get % :id) m)
)
(filter #(= "test" (get % :id)) m)
(first (filter #(= "test" (get % :id)) m))
(ns zee3.draw.shapes)
(def entities (atom []))
(defn get-by-id 
  "get the entity by id"
  [id]
  (first (filter #(= "id" (get % :id)) @shape/entities)))
(ns zee3.draw.colormap
   (:require [zee3.draw.shapes :as shape]))
(defn get-by-id 
  "get the entity by id"
  [id]
  (first (filter #(= "id" (get % :id)) @shape/entities)))
(swap! shape/entities (conj {:id "test"}))
(swap! shape/entities conj {:id "test"})
(get-by-id "test")
(filter #(= "test" (get % :id)) @shape/entities))
(filter #(= "test" (get % :id)) @shape/entities)
(defn build-name 
  "append HIT-TEST-STAGE content to stage id"
  [id]
  (str id "HH"))
(defn get-hit-context 
  "retrieve the hit stage context for the given shape config"
  [config]
  (let [stage (get config :stage)
        hit-stage (build-name stage)]
    (get-by-id hit-stage))
