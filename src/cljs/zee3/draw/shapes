(ns zee3.draw.shapes
  (:require [zee3.draw.core :as core])
  (:require [zee3.draw.defaults :as config]))

(def shape-map 
     {:circle draw-circle})

(defn rectangle [stage config]
  (let [mc (assoc (merge config/base config) :type "rectangle") 
        {:keys [x y width height]} mc
	ctx (get @contexts stage)]
    (base stage mc 
      (fn [] (.fillRect ctx x y width height)))))

(defn rounded-rectangle [stage config]
  (let [mc (assoc (merge config/rounded-rectangle config) :type "rounded-rectangle") 
        {:keys [cornerRadius x y width height lineWidth fillStyle strokeStyle]} mc
        ctx (get @contexts stage)]
    (base stage mc (fn []
      (.moveTo ctx (+ x cornerRadius) y)
      (.lineTo ctx (- (+ x width) cornerRadius) y)
      (.quadraticCurveTo ctx (+ x width) y (+ x width) y)
      (.lineTo ctx (+ x width) (- (+ y height) cornerRadius))
      (.quadraticCurveTo ctx (+ x width) (+ y height) (- (+ x width) cornerRadius) (+ y height))
      (.lineTo ctx (+ x cornerRadius) (+ y height))
      (.quadraticCurveTo ctx x (+ y height) x (- (+ y height) cornerRadius))
      (.lineTo ctx x (+ y cornerRadius))
      (.quadraticCurveTo ctx x y (+ x cornerRadius) y)))))

(defn circle [stage config]
  (let [mc (assoc (merge config/circle config) :type "circle")]
    (base stage mc (fn []
       (.arc ctx centerX, centerY, radius, 0, 2 * (), false))))))

(defn text [stage config]
  (let [mc (assoc (merge config/circle config) :type "text")]
    (draw-text mc)
    (base-config stage config)))

(defn base [stage config f]
	(let [{:keys [lineWidth fillStyle strokeStyle]} config
	     ctx (get @contexts stage)]
		(.beginPath ctx)
		(set! (.-fillStyle ctx) fillStyle)
		(set! (.-strokeStyle ctx) strokeStyle)
		(set! (.-lineWidth ctx) lineWidth)
		(f ctx config)
		(.fill ctx)
		(.stroke ctx)))

(defn base-config add-stage [stage config]
  (swap! entities conj (assoc (merge config/base config) :stage stage)))

(defn draw-text [config]
  (let [{:keys [centerX centerY radius]} mc 
        ctx (get @contexts stage]
  (base stage config (fn []
    (set! (.-fillStyle ctx) fillStyle)
    (set! (.-font ctx) font) 
    (set! (.-textBaseline ctx) textBaseline)
    (set! (.fillText ctx) text))))